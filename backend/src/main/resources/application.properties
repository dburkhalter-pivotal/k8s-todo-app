#
# sb 
# https://hackmd.io/@ryanjbaxter/spring-on-k8s-workshop
#
# try to collect semantics and spreaded knowledge at app level
# security, SLx, qualities, etc
#
# is it a good place ? is it a consistent approach ? how to expose and consume ?
#
# decide:  do I want a AP system (consul, eureka, etc) or an CP system (zookeeper, etcd, etc)
# 
info.app.name=back
info.app.kubernetes.io.name=back-demo-app
info.app.description=back-demo-app Spring Boot Web App 
info.app.version=0.23-19.aout.2021-VMware-Tanzu-South-EMEA
# 
# info.app.encoding=@project.build.sourceEncoding@
info.app.java.source=@java.version@
info.app.java.target=@java.version@
#
info.build.artifact=${project.artifactId}
info.build.name=${project.name}
info.build.description=${project.description}
info.build.version=${project.version}
#
# inject in app infos relevant to thepipeline ?
# 
info.build.created-by=maven-build-image
#
info.deploy.managed-by=kubectl
#
# around 33 indicators
#
# where to put design qualities
# where to put behavioral qualities
# where to put systemic qualities
#
# https://landing.google.com/sre/sre-book/chapters/monitoring-distributed-systems/
#
# defining SLI/SLO's
# https://cloud.google.com/monitoring/service-monitoring/
#
# describing some "ilities"
# observability is key
#
# Service Level Objective (SLO) of our system.
# display/share the SLO to other teams 
# each team owns their own SLO / API
#
# topology vs. taxonomy - under study
#
# phase 1 : taxonomy for domain & organisation
# design, dev & test
#
info.taxonomy.domain=dib-kubernetes-demo
info.taxonomy.subdomain=back-demo-app
info.taxonomy.product=backend-demo
info.taxonomy.appartment=backend-demo-appartment
info.taxonomy.tiers=backend
info.taxonomy.team=Tanzu-SEMEA-Dev
#
# info.design.rfu=rfu
# info.refactoring.rfu=10-percents
# #
# # ? info.taxonomy.indicators=33
# #
# # phase 2 : topology for operations & execution
# #
# info.topology.cluster=k8s-generic
# info.topology.namespace=dedicated
# #
# # move to systemic qualities ?
# #
# info.slo.attainable=true
# info.slo.repeatable=true
# info.slo.measurable=true
# info.slo.understandable=true
# info.slo.meaningful=medium
# info.slo.controllable=medium
# info.slo.affordable=true
# #
# # Latency, traffic, errors, saturation
# # Service Level Indicator (SLI)
# #
# # itâ€™s important to track error latency, as opposed to just filtering out errors.
# #
# info.sli.latency=15-ms
# info.sli.throughput=10-rps
# info.sli.availability=99.0
# # in percentage
# info.sli.errors=5-percents
# # fixed value for the moment
# info.sli.saturation=20-rps
# #
# # Mean Time to Repair (MTTR): total downtime / # of failures
# # Mean Time Between Failures (MTBF): total uptime / # of failures
# #
# info.sla.mtbf=8-h
# info.sla.mttr=4-h
# #
# # application quality (mix of qualities ?)
# #
# info.quality.controllability=medium
# info.quality.criticity=low
# info.quality.maturity=low
# info.quality.scability=4i
# info.quality.semantic=medium
# info.quality.stability=medium
# info.quality.stoppability=good
# # 
# # qualify non functional requirements / capacities / systemic qualities
# #
# # info.distrust=unknown
# # inspiration from "The Updated DeLone and McLean Model of Information Systems Success"
# # Exemplary measures of system quality
# # to be re-explored
# #
# info.system-quality.efficiency=high
# info.system-quality.flexibility=high
# #
# info.capacity.tested-concurrent-client=10-cc
# info.capacity.invoke-per-second=20RPS
# info.capacity.estimated-response-time=100-ms
# info.capacity.scale-factor=1-to-5
# #
# # decide do I want a AP system (consul, eureka, etc) or an CP system (zookeeper, etcd, etc)
# #
# info.cloudability.cap=AP
# #
# info.cloudability.cloud-readyness=cloud-friendly
# info.cloudability.distributability=unknown
# info.cloudability.deployability=high
# info.cloudability.stateless=yes
# info.cloudability.allow-blue-green=yes
# #
# info.cloudability.maturity-model=loosely-coupled
# info.cloudability.transactionability=unknown
# # 
# # twelvefactors
# #
# info.cloudability.codebase=none
# info.cloudability.dependencies=H2
# info.cloudability.config=none
# info.cloudability.backing-services=H2
# info.cloudability.build-release-run=manual
# info.cloudability.processes=manual
# info.cloudability.portBinding=good
# info.cloudability.concurrency=database
# info.cloudability.disposability=good
# info.cloudability.devProdParity=good
# #
# info.cloudability.api=medium
# info.cloudability.api-governance=distributed
# #
# # Observability 3 ways: Logging, Metrics & Tracing
# #
# info.cloudability.logs=medium
# info.cloudability.metrics=actuator
# info.cloudability.tracing=sleuth-openTracing
# info.cloudability.admin-process=unknown
# #
# # security
# info.security.image.scanned=not_tested
# info.security.ssl=not_tested
# info.security.protected_actuator=insecure
# info.security.endpoint-detection-response=none
# #
# # accounting
# #
# info.accountability.feature=low
# info.accountability.price-per-hour=1-euro
# #
# #info.accountability.pricePerHourRatio=unknown
# #
# # under study / trust and distrust frictions
# #
# info.trust.code=medium
# info.trust.usability=high
# info.trust.information-quality=medium
# info.trust.system-quality=high
# info.trust.system-outcomes-quality=high
# info.trust.auditability=low
# info.trust.neighboor=low
# info.trust.network=low
# #
# #
# # Access
# # Convenience Customization Data accuracy Data currency Ease of learning Ease of use
# # Integration Interactivity Navigation Reliability Response time Sophistication System accuracy
# # System features Turnaround time
# # 
# info.information-quality.accuracy=high
# # Accuracy Adequacy Availability Completeness Conciseness Consistency Format Precision Relevance Reliability Scope Timeliness Understandability Uniqueness Usability Usefulness
# #
# info.service-quality.reliability=high
# #
# # Assurance Empathy Flexibility Interpersonal quality Intrinsic quality IS training  Responsiveness Tangibles
